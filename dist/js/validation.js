class FormValidator { constructor() { this.patterns = { email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ }; this.messages = { required: 'Email address is required', invalidEmail: 'Please enter a valid email address', networkError: 'Network error. Please check your connection and try again.', serverError: 'Something went wrong. Please try again later.', success: 'Thank you! We\'ll notify you as soon as the agenda is released.' }; } validateEmail(email) { if (!email || email.trim() === '') { return { isValid: false, message: this.messages.required }; } const normalizedEmail = email.trim().toLowerCase(); if (!this.patterns.email.test(normalizedEmail)) { return { isValid: false, message: this.messages.invalidEmail }; } const suspiciousDomains = [ 'gmail.co', 'gmail.cm', 'gmai.com', 'gmial.com', 'yahoo.co', 'yahoo.cm', 'hotmail.co', 'hotmail.cm', 'outlook.co', 'outlook.cm' ]; const domain = normalizedEmail.split('@')[1]; if (suspiciousDomains.includes(domain)) { return { isValid: false, message: 'Please check your email domain spelling' }; } return { isValid: true, message: '', email: normalizedEmail }; } attachRealTimeValidation(input, errorElement) { let validationTimeout; input.addEventListener('blur', () => { const result = this.validateEmail(input.value); this.displayError(errorElement, result.isValid ? '' : result.message); this.updateInputState(input, result.isValid); }); input.addEventListener('input', () => { clearTimeout(validationTimeout); if (input.value.length > 0) { this.displayError(errorElement, ''); input.classList.remove('invalid'); } validationTimeout = setTimeout(() => { if (input.value.length > 3) { const result = this.validateEmail(input.value); if (!result.isValid) { this.displayError(errorElement, result.message); this.updateInputState(input, false); } else { this.updateInputState(input, true); } } }, 500); }); input.addEventListener('focus', () => { clearTimeout(validationTimeout); input.classList.remove('invalid'); this.displayError(errorElement, ''); }); } updateInputState(input, isValid) { if (isValid) { input.classList.remove('invalid'); input.setAttribute('aria-invalid', 'false'); } else { input.classList.add('invalid'); input.setAttribute('aria-invalid', 'true'); } } displayError(errorElement, message) { if (errorElement) { errorElement.textContent = message; errorElement.style.display = message ? 'block' : 'none'; if (message) { errorElement.setAttribute('aria-live', 'assertive'); } else { errorElement.removeAttribute('aria-live'); } } } validateForm(form) { const emailInput = form.querySelector('#email'); const emailResult = this.validateEmail(emailInput.value); const errorElement = form.querySelector('#email-error'); this.displayError(errorElement, emailResult.isValid ? '' : emailResult.message); this.updateInputState(emailInput, emailResult.isValid); return { isValid: emailResult.isValid, data: emailResult.isValid ? { email: emailResult.email } : null, message: emailResult.message }; } sanitizeEmail(email) { if (typeof email !== 'string') return ''; return email .trim() .toLowerCase() .replace(/[<>\"'&]/g, '') .substring(0, 254); } isEducationalEmail(email) { const eduDomains = [ '.edu', '.ac.', '.edu.', 'school', 'college', 'university', 'board', 'district' ]; const normalizedEmail = email.toLowerCase(); return eduDomains.some(domain => normalizedEmail.includes(domain)); } getSuccessMessage(email) { if (this.isEducationalEmail(email)) { return 'Thank you! We\'ll send the agenda details to your educational email address as soon as they\'re available.'; } return this.messages.success; } } if (typeof module !== 'undefined' && module.exports) { module.exports = FormValidator; } else { window.FormValidator = FormValidator; }