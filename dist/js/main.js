class CareerLaunchApp { constructor() { this.validator = new FormValidator(); this.heroCarousel = null; this.heroForm = null; this.bentoGrid = null; this.footer = null; this.zohoConfig = { endpoint: 'https: authToken: process.env.ZOHO_AUTH_TOKEN || '', timeout: 10000 }; this.init(); } init() { if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => this.setupEventListeners()); } else { this.setupEventListeners(); } window.addEventListener('error', (event) => this.handleGlobalError(event)); window.addEventListener('unhandledrejection', (event) => this.handlePromiseRejection(event)); } setupEventListeners() { this.initializeComponents(); this.setupKeyboardNavigation(); this.trackPerformance(); } initializeComponents() { try { this.heroCarousel = new HeroCarousel(); console.log('Hero Carousel initialized:', this.heroCarousel.getState()); } catch (error) { console.error('Hero Carousel initialization failed:', error); } try { this.heroForm = new HeroForm(this.validator, this.zohoConfig); console.log('Hero Form initialized:', this.heroForm.getState()); } catch (error) { console.error('Hero Form initialization failed:', error); } try { this.bentoGrid = new BentoGrid(); console.log('Bento Grid initialized:', this.bentoGrid.getState()); } catch (error) { console.error('Bento Grid initialization failed:', error); } try { this.footer = new Footer(); console.log('Footer initialized:', this.footer.getState()); } catch (error) { console.error('Footer initialization failed:', error); } } getApplicationState() { return { heroCarousel: this.heroCarousel?.getState(), heroForm: this.heroForm?.getState(), bentoGrid: this.bentoGrid?.getState(), footer: this.footer?.getState(), validator: !!this.validator, zohoConfig: { hasEndpoint: !!this.zohoConfig.endpoint, hasAuthToken: !!this.zohoConfig.authToken, timeout: this.zohoConfig.timeout } }; } destroy() { try { if (this.heroCarousel) { this.heroCarousel.destroy(); } } catch (error) { console.warn('Error destroying Hero Carousel:', error); } try { if (this.heroForm) { this.heroForm.destroy(); } } catch (error) { console.warn('Error destroying Hero Form:', error); } try { if (this.bentoGrid) { this.bentoGrid.destroy(); } } catch (error) { console.warn('Error destroying Bento Grid:', error); } try { if (this.footer) { this.footer.destroy(); } } catch (error) { console.warn('Error destroying Footer:', error); } this.heroCarousel = null; this.heroForm = null; this.bentoGrid = null; this.footer = null; this.validator = null; } setupKeyboardNavigation() { document.addEventListener('keydown', (e) => { if (e.key === 'Escape') { if (this.heroForm) { this.heroForm.clearMessages(); } if (this.footer && window.innerWidth <= 767) { this.footer.forceShow(); } } }); this.setupGlobalTabOrder(); } setupGlobalTabOrder() { const mainFocusableElements = [ document.querySelector('#email'), document.querySelector('.cta-button'), document.querySelector('.footer-link') ].filter(el => el !== null); mainFocusableElements.forEach((element, index) => { element.setAttribute('tabindex', '0'); }); } trackPerformance() { window.addEventListener('load', () => { try { const perfData = performance.getEntriesByType('navigation')[0]; const loadTime = perfData.loadEventEnd - perfData.loadEventStart; if (loadTime > 2000) { console.warn(`Page load time: ${loadTime}ms (target: <2000ms)`); } } catch (error) { console.warn('Performance tracking failed:', error); } }); } handleGlobalError(event) { console.error('Global application error:', event.error); console.log('Application state at error:', this.getApplicationState()); try { if (event.error?.message?.includes('component')) { console.warn('Component error detected, attempting graceful degradation'); } } catch (recoveryError) { console.error('Error recovery failed:', recoveryError); } } handlePromiseRejection(event) { console.error('Unhandled promise rejection:', event.reason); console.log('Application state at rejection:', this.getApplicationState()); event.preventDefault(); } } document.addEventListener('DOMContentLoaded', () => { if (typeof fetch === 'undefined' || typeof Promise === 'undefined') { console.error('Browser not supported: Missing required features'); const messagesElement = document.getElementById('form-messages'); if (messagesElement) { messagesElement.className = 'form-messages error show'; messagesElement.textContent = 'Your browser is not supported. Please update to a modern browser.'; } return; } try { const app = new CareerLaunchApp(); window.careerLaunchApp = app; console.log('ðŸš€ myBlueprint Career Launch initialized successfully'); console.log('Application state:', app.getApplicationState()); } catch (error) { console.error('Failed to initialize Career Launch application:', error); try { new HeroCarousel(); console.log('Fallback: Hero carousel initialized independently'); } catch (fallbackError) { console.error('Complete initialization failure:', fallbackError); } } });