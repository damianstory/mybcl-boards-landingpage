class HeroCarousel { constructor() { this.carousel = document.querySelector('.hero-carousel'); this.track = document.querySelector('.carousel-track'); this.slides = document.querySelectorAll('.carousel-slide'); this.isPaused = false; this.init(); } init() { if (!this.carousel || !this.track || this.slides.length === 0) { console.warn('No carousel elements found'); return; } this.setupHoverControls(); this.preloadImages(); this.setupAccessibility(); } setupHoverControls() { if (window.matchMedia('(hover: hover)').matches) { this.carousel.addEventListener('mouseenter', () => { this.pauseAnimation(); }); this.carousel.addEventListener('mouseleave', () => { this.resumeAnimation(); }); } } pauseAnimation() { this.isPaused = true; if (this.track) { this.track.style.animationPlayState = 'paused'; } } resumeAnimation() { this.isPaused = false; if (this.track) { this.track.style.animationPlayState = 'running'; } } preloadImages() { this.slides.forEach(slide => { const img = slide.querySelector('img'); if (img && !img.complete) { const preloadImg = new Image(); preloadImg.src = img.src; } }); } setupAccessibility() { if (this.carousel) { this.carousel.setAttribute('aria-label', 'Continuous carousel showing diverse career professionals'); } this.slides.forEach((slide, index) => { const slideNumber = (index % 10) + 1; slide.setAttribute('aria-label', `Career professional ${slideNumber} of 10`); }); } destroy() { if (this.carousel) { this.carousel.removeEventListener('mouseenter', this.pauseAnimation); this.carousel.removeEventListener('mouseleave', this.resumeAnimation); } } } class CareerLaunchApp { constructor() { this.validator = new FormValidator(); this.heroCarousel = null; this.isSubmitting = false; this.retryCount = 0; this.maxRetries = 3; this.zohoConfig = { endpoint: 'https: authToken: process.env.ZOHO_AUTH_TOKEN || '', timeout: 10000 }; this.init(); } init() { if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => this.setupEventListeners()); } else { this.setupEventListeners(); } window.addEventListener('error', (event) => this.handleGlobalError(event)); window.addEventListener('unhandledrejection', (event) => this.handlePromiseRejection(event)); } setupEventListeners() { const form = document.getElementById('email-form'); const emailInput = document.getElementById('email'); const errorElement = document.getElementById('email-error'); if (!form || !emailInput || !errorElement) { console.error('Required form elements not found'); return; } try { this.heroCarousel = new HeroCarousel(); } catch (error) { console.error('Hero carousel initialization failed:', error); } this.validator.attachRealTimeValidation(emailInput, errorElement); form.addEventListener('submit', (e) => this.handleFormSubmit(e)); emailInput.addEventListener('keypress', (e) => { if (e.key === 'Enter' && !this.isSubmitting) { e.preventDefault(); form.dispatchEvent(new Event('submit')); } }); this.setupKeyboardNavigation(); this.trackPerformance(); } async handleFormSubmit(event) { event.preventDefault(); if (this.isSubmitting) return; const form = event.target; const button = form.querySelector('.cta-button'); const messagesElement = document.getElementById('form-messages'); this.clearMessages(); const validationResult = this.validator.validateForm(form); if (!validationResult.isValid) { this.focusOnError(); return; } try { this.setLoadingState(button, true); this.isSubmitting = true; const result = await this.submitToZoho(validationResult.data); if (result.success) { this.showSuccess(messagesElement, validationResult.data.email); this.resetForm(form); this.trackConversion(validationResult.data.email); } else { throw new Error(result.message || 'Submission failed'); } } catch (error) { console.error('Form submission error:', error); this.handleSubmissionError(error, messagesElement); } finally { this.setLoadingState(button, false); this.isSubmitting = false; } } async submitToZoho(data) { if (!this.zohoConfig.authToken) { console.warn('Zoho auth token not configured, using fallback'); return this.simulateSubmission(data); } const payload = { data: [{ Email: data.email, Lead_Source: 'Career Launch Landing Page', Lead_Status: 'Not Contacted', Company: 'Educational Institution', Last_Name: data.email.split('@')[0], Description: `Interested in myBlueprint Career Launch event on December 2nd. Signed up for agenda notifications.` }] }; const requestOptions = { method: 'POST', headers: { 'Authorization': `Zoho-oauthtoken ${this.zohoConfig.authToken}`, 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(payload), signal: AbortSignal.timeout(this.zohoConfig.timeout) }; try { const response = await fetch(this.zohoConfig.endpoint, requestOptions); const result = await response.json(); if (response.ok && result.data && result.data[0].status === 'success') { return { success: true, id: result.data[0].details.id }; } else { const errorMsg = result.data?.[0]?.message || result.message || 'API request failed'; throw new Error(errorMsg); } } catch (error) { if (error.name === 'AbortError') { throw new Error('Request timed out. Please check your connection.'); } if (this.retryCount < this.maxRetries && this.isNetworkError(error)) { this.retryCount++; console.log(`Retrying submission (attempt ${this.retryCount})`); await this.delay(1000 * this.retryCount); return this.submitToZoho(data); } throw error; } } async simulateSubmission(data) { await this.delay(1500); if (Math.random() < 0.1) { throw new Error('Simulated network error'); } return { success: true, id: 'sim_' + Date.now(), message: 'Simulation successful' }; } setLoadingState(button, isLoading) { if (isLoading) { button.classList.add('loading'); button.disabled = true; button.setAttribute('aria-busy', 'true'); button.querySelector('.button-text').textContent = 'Submitting...'; } else { button.classList.remove('loading'); button.disabled = false; button.setAttribute('aria-busy', 'false'); button.querySelector('.button-text').textContent = 'Notify Me'; } } showSuccess(messagesElement, email) { const message = this.validator.getSuccessMessage(email); messagesElement.className = 'form-messages success show'; messagesElement.textContent = message; messagesElement.setAttribute('role', 'status'); messagesElement.setAttribute('aria-live', 'polite'); setTimeout(() => { if (messagesElement.classList.contains('success')) { messagesElement.classList.remove('show'); } }, 10000); } handleSubmissionError(error, messagesElement) { let errorMessage; if (this.isNetworkError(error)) { errorMessage = this.validator.messages.networkError; } else if (error.message.includes('timeout') || error.message.includes('timed out')) { errorMessage = 'Request timed out. Please try again.'; } else { errorMessage = this.validator.messages.serverError; } messagesElement.className = 'form-messages error show'; messagesElement.textContent = errorMessage; messagesElement.setAttribute('role', 'alert'); messagesElement.setAttribute('aria-live', 'assertive'); setTimeout(() => { const emailInput = document.getElementById('email'); if (emailInput) emailInput.focus(); }, 100); } clearMessages() { const messagesElement = document.getElementById('form-messages'); if (messagesElement) { messagesElement.className = 'form-messages'; messagesElement.textContent = ''; messagesElement.removeAttribute('role'); messagesElement.removeAttribute('aria-live'); } } resetForm(form) { const emailInput = form.querySelector('#email'); if (emailInput) { emailInput.value = ''; emailInput.classList.remove('invalid'); emailInput.removeAttribute('aria-invalid'); } const errorElement = form.querySelector('#email-error'); if (errorElement) { this.validator.displayError(errorElement, ''); } this.retryCount = 0; } focusOnError() { const errorInput = document.querySelector('.form-input.invalid'); if (errorInput) { errorInput.focus(); } } setupKeyboardNavigation() { document.addEventListener('keydown', (e) => { if (e.key === 'Escape') { this.clearMessages(); } }); const focusableElements = [ document.querySelector('.logo'), document.querySelector('#email'), document.querySelector('.cta-button') ].filter(el => el !== null); focusableElements.forEach((element, index) => { element.setAttribute('tabindex', index === 0 ? '0' : '0'); }); } trackConversion(email) { try { const conversionData = { event: 'email_signup', email_domain: email.split('@')[1], timestamp: new Date().toISOString(), page: 'career_launch_landing', is_educational: this.validator.isEducationalEmail(email) }; console.log('Conversion tracked:', conversionData); } catch (error) { console.warn('Analytics tracking failed:', error); } } trackPerformance() { window.addEventListener('load', () => { try { const perfData = performance.getEntriesByType('navigation')[0]; const loadTime = perfData.loadEventEnd - perfData.loadEventStart; if (loadTime > 2000) { console.warn(`Page load time: ${loadTime}ms (target: <2000ms)`); } } catch (error) { console.warn('Performance tracking failed:', error); } }); } handleGlobalError(event) { console.error('Global error:', event.error); if (event.error && event.error.message && event.error.message.includes('form')) { const messagesElement = document.getElementById('form-messages'); if (messagesElement) { this.handleSubmissionError(new Error('An unexpected error occurred'), messagesElement); } } } handlePromiseRejection(event) { console.error('Unhandled promise rejection:', event.reason); event.preventDefault(); } isNetworkError(error) { const networkErrors = [ 'network', 'fetch', 'connection', 'timeout', 'dns', 'offline', 'cors', 'blocked' ]; const errorMessage = (error.message || '').toLowerCase(); return networkErrors.some(keyword => errorMessage.includes(keyword)); } delay(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } } document.addEventListener('DOMContentLoaded', () => { try { new HeroCarousel(); } catch (error) { console.error('Standalone hero carousel failed:', error); } if (typeof fetch === 'undefined' || typeof Promise === 'undefined') { console.error('Browser not supported: Missing required features'); const messagesElement = document.getElementById('form-messages'); if (messagesElement) { messagesElement.className = 'form-messages error show'; messagesElement.textContent = 'Your browser is not supported. Please update to a modern browser.'; } return; } try { new CareerLaunchApp(); } catch (error) { console.error('Failed to initialize application:', error); } });